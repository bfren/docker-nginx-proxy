#!/command/with-contenv bash

set -euo pipefail
export BF_E=`basename ${0}`


#======================================================================================================================
# Executable usage.
#======================================================================================================================

usage () {
    echo "Cleanup unused SSL and Nginx configuration files."
    echo "Usage: `basename ${0}` [-m] [-h]" 2>&1
    echo "    -m    Mode: 0 = dry run (default), 1 = perform deletions."
    echo "    -h    Show this usage message."
    exit 2
}

MODE=0
while getopts ":hm:" C ; do
    case ${C} in
        h) usage ;;
        m) MODE="${OPTARG}" ;;
        ?) bf-notok "Invalid option: -${OPTARG}" "ssl-cleanup" && usage ;;
    esac
done

case ${MODE} in
    0) bf-echo "Dry Run mode enabled." ;;
    1) bf-echo "Deletion mode enabled." ;;
    ?) bf-error "Unknown mode '${MODE}'." ;;
esac


#======================================================================================================================
# Output message or remove based on mode.
#
# Arguments
#   1   Path to remove using * glob
#======================================================================================================================

remove () {

    if [ "${MODE}" = "0" ] ; then

        bf-echo " .. will remove ${1}*"

    elif [ "${MODE}" = "1" ] ; then

        bf-echo " .. removing ${1}*"

        D=${1}/
        if [ -d "${D}" ] ; then
            bf-echo "    ${D}"
            rm -r ${D}
        fi

        DOT_D=${1}.d
        if [ -d "${DOT_D}" ] ; then
            bf-echo "    ${DOT_D}"
            rm -r ${DOT_D}
        fi

        CRT=${1}.crt
        if [ -f "${CRT}" ] ; then
            bf-echo "    ${CRT}"
            rm ${CRT}
        fi

        KEY=${1}.key
        if [ -f "${KEY}" ] ; then
            bf-echo "    ${KEY}"
            rm ${KEY}
        fi

        bf-echo "    done"

    fi

}


#======================================================================================================================
# Load SSL configuration.
#======================================================================================================================

bf-echo "Loading SSL configuration."
source ${BF_INC}/proxy-load-conf.sh
bf-debug "Loaded: ${DOMAINS[*]}."


#======================================================================================================================
# Check SSL certifications and config.
#======================================================================================================================

bf-echo "Getting SSL certificate configuration."
SSL_CONFIGS=(${PROXY_SSL_CERTS}/*)

bf-echo "Checking against configured domains..."
for CFG in "${SSL_CONFIGS[@]}" ; do

    # do nothing if CFG doesn't exist any more - which means it's been deleted by the script
    [[ ! -d "${CFG}" ]] && [[ ! -f "${CFG}" ]] && continue

    # do nothing if CFG is a file
    [[ -f "${CFG}" ]] && continue

    # get name
    NAME=$(basename -- "${CFG}")
    bf-debug " .. ${NAME}"

    # if NAME is not the main PROXY_URI nor in the DOMAINS array, delete everything
    [[ "${PROXY_URI}" != "${NAME}" ]] \
        && [[ -z "`get-domain ${NAME}`" ]] \
        && remove "${PROXY_SSL_CERTS}/${NAME}"

done


#======================================================================================================================
# Check Nginx config.
#======================================================================================================================

bf-echo "Getting Nginx sites configuration."
NGINX_CONFIGS=(${PROXY_SITES}/*)

bf-echo "Checking against configured domains..."
for CFG in "${NGINX_CONFIGS[@]}" ; do

    # do nothing if CFG doesn't exist any more - which means it's been deleted by the script
    [[ ! -d "${CFG}" ]] && [[ ! -f "${CFG}" ]] && continue

    # do nothing if CFG is a file
    [[ -f "${CFG}" ]] && continue

    # get name and strip .d from end of directory
    NAME=$(basename -- "${CFG}")
    STRIPPED=${NAME::-2}
    bf-debug " .. ${STRIPPED}"

    # if STRIPPED is not the main PROXY_URI nor in the DOMAINS array, delete everything
    [[ "${PROXY_URI}" != "${STRIPPED}" ]] \
        && [[ -z "`get-domain ${STRIPPED}`" ]] \
        && remove "${PROXY_SITES}/${STRIPPED}"

done


#======================================================================================================================
# If mode is 1 something may have been deleted so we need to reload Nginx.
#======================================================================================================================

if [ "${MODE}" = "1" ] ; then
    nginx-reload
fi

bf-done
